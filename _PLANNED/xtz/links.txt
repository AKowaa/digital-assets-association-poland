https://medium.com/paradigm-fund/tezos-a-critical-reliability-update-for-all-tezos-nodes-bringing-chainlink-oracles-to-the-tezos-e223984a7740

https://tezostaquito.io/

https://github.com/ecadlabs/proposal-vote

Testnet: https://carthagenet.tezblock.io/ && https://cartgagenet.tzstats.com/

https://github.com/stove-labs/tzip-12

https://www.tezos.help/

Why Tezos?

One might well ask why we need another public blockchain platform that runs smart contracts, and why developers are also tasked with adapting to new languages.
Let us explore the value added stemming from Tezos, as well as some of the known risks to keep in mind as we unfold the Tezos architecture and approach.
Reliability of both the network platform and the contracts that run on it is always a concern. After all, if platforms do not behave as expected, or if contracts don't behave as the authors intended, the consequences can be quite serious. Incidents of defects diminish trust in smart contracts, the system, and even cast doubt upon the very workability of smart contracts and blockchain technology in general.
Tezos' design aims for reliability, security, and modularity. How so? Smart contracts in Tezos are more reliable because they more easily facilitate formal verification.
Formal verification is a much discussed topic. There is some resistance from the developer communities; to developers who are accustomed to fast development turnaround methodologies such asAgile, the very idea of formal verification may seem like a foreign concept. It's easy to lose sight of the existence of more disciplined approaches that are more common in mission-critical settings like nuclear and aeronautical engineering.
For Tezos, more easily supporting formal verification allows one to prove smart contract code correctness, and with it make contracts more secure and reliable. The Tezos ecosystem contains a number of specialised tools focused on secure DApp development, and at the same time the opportunity to analyse smart contract code more easily.
Another important design aspect with which the Tezos platform brings additional value to the blockchain ecosystem can be found in regard to its governance mechanism.
Upgrades to blockchains are particularly difficult to execute in decentralised consensus-based systems as the need for agreement among a distributed set of participants is implied and always includes an element of overturning previous agreements. It is also very difficult to remedy such a situation in an environment where change can be considered a bug and where breaking changes may harm software that is already deployed. For example, in informal terms, Ethereum does what it does the way it does it but developers have little assurance about platform invariants. Invariants are not well-defined. The same community resistance that stands as a bulwark against breaking changes is also, arguably, an impediment to progress. The same can be said of Bitcoin. Both networks, Bitcoin and Ethereum, have suffered disagreements about what is progress and what is an anti-feature. Bitter disputes have split their communities and as a result disrupted their network effects, which disrupts their value.
Performance is always a challenge in public blockchains. Public permissionless smart contract platforms sacrifice transaction throughput for decentralisation. They have, however, demonstrated the need for research into the matter and Tezos is designed with new theoretical foundations in mind. While Ethereum aims to upgrade its consensus system to Proof-of-Stake (currently Proof-of-Work), such an upgrade is challenging for the reasons mentioned above, among others. Tezos uses a uniqueProof-of-Stake process that incorporates delegation (this is not the same as Delegated Proof-of-Stake systems like EOS or Tron), initially - We say "initially" because the possibility of upgrades could lead it to be amended in the future.

To write smart contracts on Tezos, a domain-specific language called Michelson is used. It is stack-based, with high-level data types and primitives and strict static type checking. On first encounter, it seems to be an odd language choice as it does not have features like polymorphism or named functions. Dealing with the stack is complicated and there is no standard library to rely on. Even though it appears underpowered when compared to languages such as Haskell or OCaml, the language's restrictions are a result of its design goals. Michelson is designed as a readable compilation target to make the compiler's output understandable. The idea behind it is to empower developers to build analysis tools and compilers by using a language that is simple enough to do so.
